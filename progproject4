Screen('Preference', 'SkipSyncTests', 1); 

% Make sure the script is running on Psychtoolbox-3:
AssertOpenGL;

subID = input(strcat('Subject ID: '));

if ~exist('subID','var')
    subID=66;
end

fileName=['PosnerexpSubj_' num2str(subID) '.csv'];

%number of trials (you can change it)!!!!!!!!
num_trials = 80;

% Define column headers
colHeaders = ["subID","trial","conditions(trial)","response.accuracy","reaction.time"];

% Create an empty table with column headers

dataTable = array2table(zeros(length(num_trials), length(colHeaders)), "VariableNames", colHeaders);

% Save the empty table to a CSV file
writetable(dataTable, fileName);

%warn if duplicate sub ID
if exist("fileName","file")
   if ~IsOctave
       resp=questdlg({['the file ' fileName ' already exists']; 'do you want to overwrite it?'},...
           'duplicate warning','cancel','ok','ok');
   else
       resp=input(['the file ' fileName ' already exists. do you want to overwrite it? [Type ok for overwrite]'], 's');
   end

   if ~strcmp(resp,'ok') %abort experiment if the answer is no
       disp('experiment aborted')
       return
   end
end



%Allowing to write
fd = fopen(fileName,'w');


% Enable unified mode of KbName, so KbName accepts identical key names on
% all operating systems (not absolutely necessary, but good practice):
KbName('UnifyKeyNames');
%Here the experiment starts in tryâ€¦catch to make sure we save the data if something happens during the experiment


equal_cue = [zeros(1, 3*num_trials/4), ones(1, num_trials/4)]; % 0: Invalid Cue, 1: Valid Cue

equal_position = [repmat(10, 1, 3*num_trials/8), repmat(20, 1, 3*num_trials/8), repmat(10, 1, num_trials/8), repmat(20, 1, num_trials/8)]; 

% 10: Target on R, 20: Target on L
%30 30 10 10
unshuffled_cond = equal_cue + equal_position;
conditions = unshuffled_cond(randperm(num_trials));
% Coding for stimulus:
% 10: Invalid for R (Cue on L)
% 11: Valid for R (Cue on R)
% 20: Invalid for L (Cue on R)
% 21: Valid for L (Cue on L)

try

    %first KbCheck, WaitSecs call so that they work smoothly
    KbCheck;
    WaitSecs(0.3);
    GetSecs;

    %disable output of keypresses to Matlab. In case something happens and
    %you want to quit the screen, so the keyboard should recognize an
    %escaping key - Ctrl-C
    ListenChar(2);

    %Setting a higher DebugLevel

    Screen('Preference','VisualDebugLevel', 3);

    %identify screens:
    screens=Screen('Screens');
    screenNumber=max(screens);

    %open an (the only) onscreen Window
    [expWin,rect]=Screen('OpenWindow',screenNumber);
    

    
    %Getting the screen's dimensions
    screenRect = Screen('Rect', expWin);
    screenWidth = screenRect(3);
    screenHeight = screenRect(4);

    %Getting the screen's middle points
    [mx,my]= RectCenter(rect);

    %We are not using the mouse
    HideCursor;

    %Preparing the visual stimuli

    baseRect = [0 0 200 200]; %dimensions of the square frame
    L_square = CenterRectOnPointd(baseRect, screenWidth/4, screenHeight/2); %center points of the square
    R_square = CenterRectOnPointd(baseRect, 3*screenWidth/4, screenHeight/2); %%center points of the square
    square_Color = [0 0 0]; %black

    base_circle = [0 0 100 100]; %dimensions of the circle
    maxDiameter = max(base_circle) * 1.01;
    L_circle = CenterRectOnPointd(base_circle, screenWidth/4, screenHeight/2);
    R_circle = CenterRectOnPointd(base_circle, 3*screenWidth/4, screenHeight/2);
    cue_color = [0 0 0]; %black
    target_color = [255 0 0]; %red

    %Preparing the fixation cross
    FixCr=ones(20,20)*255;
    FixCr(10:11,:)=0;
    FixCr(:,10:11)=0;  %try imagesc(FixCr) to display the result in Matlab
    fixcross = Screen('MakeTexture',expWin,FixCr);

    % Welcome screen
    Screen('TextSize', expWin, 32);

    welcomeText = 'Press the buttons A (LEFT) or L (RIGHT) \n depending on where the RED circle appears on your screen.\n Please ignore the BLACK circles. \n \n \n Please press one of these buttons (A or L) to START.';

    % Draw the welcome text, at the center of the window:
    DrawFormattedText(expWin, welcomeText, 'center', 'center', [255 0 0]);

    % Display the welcome text:
    Screen('Flip', expWin);
    
    % Waiting for the key press-release
    KbWait([], 3);
    
    %Clear screen
    Screen('Flip', expWin); 

    %Wait before the start of the trial
    WaitSecs(1.5);
    

    % Loop through trials
    for trial = 1:num_trials
    % Display fixation point
       Screen('DrawTexture', expWin, fixcross,[],[mx-20,my-20,mx+20,my+20]); % Prepare fixation cross
       tfixation = Screen('Flip', expWin, [], 1); % Flip the screen to show fixation cross
       WaitSecs(1); % Display fixation for 1 second

    % Display squares on R and L
       Screen('FrameRect', expWin, square_Color, R_square, 4);
       Screen('FrameRect', expWin, square_Color, L_square, 4);
       Screen('Flip', expWin, [], 1);
       WaitSecs(0.5);

   % Display cue on R or L side
   Screen('TextSize', expWin, 50);
   if conditions(trial) == 10 || conditions(trial) == 21 % Cue on L
      Screen('FillOval', expWin, cue_color, L_circle, maxDiameter); 
      Screen('Flip', expWin, [], 1);
   else % Cue on R
      Screen('FillOval', expWin, cue_color, R_circle, maxDiameter);
      Screen('Flip', expWin, [], 1);           
   end
   WaitSecs(0.15); % Display cue for 0.15 seconds

   % Clear screen 

   Screen('Flip', expWin);
  
   %Redraw fixation, boxes

   Screen('DrawTexture', expWin, fixcross,[],[mx-20,my-20,mx+20,my+20]);
   Screen('FrameRect', expWin, square_Color, R_square, 4);
   Screen('FrameRect', expWin, square_Color, L_square, 4);
   
   % Display target on R or L side
   if conditions(trial) == 10 || conditions(trial) == 11 % Display on R
      TargetKey = KbName('L');
      Screen('FillOval', expWin, target_color, R_circle, maxDiameter); 
      [VBLTimestamp, start_rt] = Screen('Flip', expWin, [], 1);
   else % Display on L
      TargetKey = KbName('A');
      Screen('FillOval', expWin, target_color, L_circle, maxDiameter); 
      [VBLTimestamp, start_rt] = Screen('Flip', expWin, [], 1);
   end
  
   % REACTION TIME

   timeout = false;
   RestrictKeysForKbCheck([KbName('A') KbName('L')]);
   while ~timeout %while not timed out
    [ keyIsDown, seconds, keyCode ] = KbCheck;
    if (keyIsDown), keyCode = find(keyCode, 1);break; end
    if ((seconds - start_rt) >= 1.5), timeout = true;
    end
   end


   if timeout
      response.accuracy = 3;
      reaction.time = 1.5;   
      DrawFormattedText(expWin, 'TOO SLOW', 'center',... 
      screenHeight * 0.75, [255 0 0]); %feedback
      Screen('Flip', expWin); %flips 
      WaitSecs(0.8) %feedback duration
      Screen('Flip', expWin, [], 0); %blank screen
      WaitSecs(0.3) %intertrial pause

   elseif keyCode == TargetKey
          response.accuracy = 1;%corr
          reaction.time = seconds - start_rt;
          Screen('Flip', expWin); %blank screen
          WaitSecs(0.3)%intertrial pause

   elseif  keyCode ~= TargetKey %incorrect
           response.accuracy = 2;
           reaction.time = seconds - start_rt;  
           DrawFormattedText(expWin, 'INCORRECT', 'center',...
           screenHeight * 0.75, [255 0 0]);%feedback
           Screen('Flip', expWin); 
           WaitSecs(0.8) %feedback duration
           Screen('Flip', expWin,[],0); %blank screen
           WaitSecs(0.3)%intertrial pause
   end
   dataTable(trial, :) = {subID,trial,conditions(trial),response.accuracy,reaction.time};

   writetable(dataTable, fileName);
   end
   

    %Cleanup
   
    ShowCursor;
    sca;
    ListenChar(0);
    fclose('all');

    return;
catch
% catch error: This is executed in case something goes wrong in the
    % 'try' part due to programming error etc.:

    %Cleanup
    sca;
    ShowCursor;
    ListenChar(0);
    fclose('all');
    psychrethrow(psychlasterror);
end

    
   

